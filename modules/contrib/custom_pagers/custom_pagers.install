<?php
// $Id: custom_pagers.install,v 1.3 2008/06/17 20:47:05 eaton Exp $

/**
 * Implementation of hook_install().
 */
function custom_pagers_install() {
  drupal_install_schema('custom_pagers');
}

function custom_pagers_schema() {
  $schema['custom_pager'] = array(
    'description' => t('Stores data for previous/next pagers to be added to nodes.'),
    'fields' => array(
      'pid' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => t('Unique identifier for the {custom_pager}.'),
      ),
      'title' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t("The visible title of the {custom_pager}.")
      ),
      'list_php' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'description' => t('Raw PHP to populate this {custom_pager}.'),
      ),
      'view' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t("The name of the view used for this {custom_pager}.")
      ),
      'args' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t("A serialized array of arguments for the {custom_pager}'s view.")
      ),
      'position' => array(
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => '',
        'description' => t("The position where this {custom_pager} should be displayed.")
      ),
      'visibility_php' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'description' => t('Raw PHP to determine when the {custom_pager} should be displayed.'),
      ),
      'node_type' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => t("A specific node type this {custom_pager} should be displayed with.")
      ),
      'reverse_list' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => t("A boolean flag indicating that this {custom_pager} should be displayed in reverse order.")
      ),
      'cache_list' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => t("A boolean flag indicating that this {custom_pager}'s list of nodes should be cached.")
      ),
    ),
    'primary key' => array('pid'),
  );
  return $schema;
}


function custom_pagers_update_1() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {custom_pager} ADD list_php text");
      $ret[] = update_sql("ALTER TABLE {custom_pager} ADD visibility_php text");
      break;
    case 'pgsql':
      db_add_column($ret, 'custom_pager', 'list_php', 'text', array('default' => ''));
      db_add_column($ret, 'custom_pager', 'visibility_php', 'text', array('default' => ''));
      break;
  }
  return $ret;
}

function custom_pagers_update_2() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      $ret[] = update_sql("ALTER TABLE {custom_pager} ADD cache_list tinyint NOT NULL default 0");
      $ret[] = update_sql("ALTER TABLE {custom_pager} ADD reverse_list tinyint NOT NULL default 0");
      break;
    case 'pgsql':
      db_add_column($ret, 'custom_pager', 'cache_list', 'smallint', array('not null' => TRUE, 'default' => 0));
      db_add_column($ret, 'custom_pager', 'reverse_list', 'smallint', array('not null' => TRUE, 'default' => 0));
      break;
  }
  return $ret;
}

function custom_pagers_uninstall() {
  drupal_uninstall_schema('custom_pagers');
}
